name: "Texinfo"
scopeName: "text.texinfo"
fileTypes: [
	"texinfo"
	"texi"
	"txi"
]
firstLineMatch: """(?x)
	# TeX directive
	^\\s*\\\\input\\s+texinfo\\s*$
	|
	# Modeline
	(?i:
		# Emacs
		-\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
			texinfo
		(?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
		
		|
		
		# Vim
		(?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\r\\n:]+:)|:(?!\\s* set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\r\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=
			texinfo
		(?=\\s|:|$)
	)
"""
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#comments"}
			{include: "#dashes"}
			{include: "#texLine"}
			{include: "#command"}
		]
	
	
	# Argument delimiter used in some contexts
	comma:
		name: "punctuation.separator.delimiter.comma.texinfo"
		match: ","
	
	
	# Generic command invocation
	command:
		patterns: [{
			# @alias [new]=[existing]
			name: "meta.command.alias.texinfo"
			match: "((@)alias)\\s+([^=\\s]+)\\s*(=)\\s*([^=\\s]+)"
			captures:
				1: name: "keyword.operator.command.alias.texinfo"
				2: name: "punctuation.definition.function.texinfo"
				3: name: "entity.name.function.alias.texinfo"
				4: name: "punctuation.separator.separator.texinfo"
				5: name: "entity.name.function.source.texinfo"
		},{
			# @headings [on|off|single|double]
			name: "meta.command.headings.texinfo"
			match: "((@)headings)\\s+(?:(on)|(off)|(single|double))\\b"
			captures:
				1: name: "keyword.operator.command.headings.texinfo"
				2: name: "punctuation.defining.function.texinfo"
				3: name: "constant.language.boolean.true.texinfo"
				4: name: "constant.language.boolean.false.texinfo"
				5: name: "constant.language.heading-type.$5.texinfo"
		},{
			# @setchapternewpage [on|off|odd]
			name: "meta.command.setchapternewpage.texinfo"
			match: "((@)setchapternewpage)\\s+(?:(on)|(off)|(odd))\\b"
			captures:
				1: name: "keyword.operator.command.headings.texinfo"
				2: name: "punctuation.defining.function.texinfo"
				3: name: "constant.language.boolean.true.texinfo"
				4: name: "constant.language.boolean.false.texinfo"
				5: name: "constant.language.odd.texinfo"
		},{
			# Commands which take `true` or `false` as their only argument
			name: "meta.command.$3.texinfo"
			match: "((@)(allowcodebreaks))\\s+(true|false)(?=\\s|$)"
			captures:
				1: name: "keyword.operator.command.$3.texinfo"
				2: name: "punctuation.definition.function.texinfo"
				4: name: "constant.language.boolean.$4.texinfo"
		},{
			# Commands which take `on` or `off` as their only argument
			name: "meta.command.$3.texinfo"
			match: """(?x) ((@)
				(codequotebacktick|codequoteundirected|deftypefnnewline
				|frenchspacing|validatemenus|xrefautomaticsectiontitle))
				\\s+ (?:(on)|(off)) \\b
			"""
			captures:
				1: name: "keyword.operator.command.$3.texinfo"
				2: name: "punctuation.definition.function.texinfo"
				4: name: "constant.language.boolean.true.texinfo"
				5: name: "constant.language.boolean.false.texinfo"
		},{
			# Non-alphabetic commands
			name: "keyword.operator.command.non-alphabetic.texinfo"
			match: "(@)[-!\"'&*./:=?@\\\\^`{}~]"
			captures:
				1: name: "punctuation.definition.function.texinfo"
		},{
			# “Escaped” whitespace
			name: "keyword.operator.command.whitespace.texinfo"
			match: "(@)(?:( |\\t)|$)"
			captures:
				1: name: "punctuation.definition.function.texinfo"
		},{
			# @, - Generate cedilla accent
			name: "meta.command.braced.texinfo"
			begin: "((@),)({)"
			end:   "}"
			beginCaptures:
				1: name: "keyword.operator.command.cedilla-accent.texinfo"
				2: name: "punctuation.definition.function.texinfo"
				3: name: "punctuation.section.scope.begin.texinfo"
			endCaptures:
				0: name: "punctuation.section.scope.end.texinfo"
			patterns: [
				name: "constant.character.texinfo"
				match: "[^\\s{}@,]+"
				
				{include: "#comma"}
				{include: "#main"}
			]
		},{
			# `@command{args}`
			name:  "meta.command.braced.texinfo"
			begin: "((@)(\\w+))({)"
			end:   "}"
			beginCaptures:
				1: name: "keyword.operator.command.$3.texinfo"
				2: name: "punctuation.definition.function.texinfo"
				4: name: "punctuation.section.scope.begin.texinfo"
			endCaptures:
				0: name: "punctuation.section.scope.end.texinfo"
			patterns: [
				name: "variable.parameter.texinfo"
				match: "[^\\s{}@,]+"
				
				{include: "#comma"}
				{include: "#main"}
			]
		},{
			# `@command`
			name: "keyword.operator.command.$2.texinfo"
			match: "(@)(\\w+)"
			captures:
				1: name: "punctuation.definition.function.texinfo"
		}]
	
	
	# Comment lines
	comments:
		patterns: [{
			# `@command` invocation
			name: "comment.line.at-sign.texinfo"
			begin: "((@)c(?:omment)?)(?=$|[^-A-Za-z0-9])"
			end:   "$"
			beginCaptures:
				1: name: "keyword.operator.command.start-comment.texinfo"
				2: name: "punctuation.definition.function.texinfo"
		},{
			# TeX-style comment
			name: "comment.line.tex-style.texinfo"
			begin: "\\x7F"
			end:   "$"
			beginCaptures:
				0: name: "punctuation.whitespace.delete.texinfo"
		}]
	
	
	# Em/en dashes
	dashes:
		patterns: [
			{match: "---", name: "constant.character.dash.em-dash.texinfo"}
			{match: "--",  name: "constant.character.dash.en-dash.texinfo"}
		]

	# `\input texinfo`
	texLine:
		match: "^\\s*((\\\\)input)\\s+([^@\\s\\x7F]+)"
		captures:
			1: name: "support.function.general.tex"
			2: name: "punctuation.definition.function.tex"
			3: name: "support.constant.language.other.tex"
			
